generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  company_name     String
  creator_id       Int
  companyHierarchy CompanyHierarchy[]
  task             Task[]
  user             User[]
}

model CompanyHierarchy {
  id              Int     @id @default(autoincrement())
  hierarchy_level Int
  hierarchy_name  String
  company_id      Int
  company         Company @relation(fields: [company_id], references: [id])
  user            User[]
}

model User {
  id                   Int               @id @default(autoincrement())
  name                 String
  email                String            @unique
  password             String
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  profile_image_url    String?
  reminders            Reminders[]
  company_id           Int?
  company              Company?          @relation(fields: [company_id], references: [id])
  company_hierarchy_id Int?
  companyHierarchy     CompanyHierarchy? @relation(fields: [company_hierarchy_id], references: [id])
  taskCommentLike      TaskCommentLike[]
  task                 Task[]
}

model Reminders {
  id            Int            @id @default(autoincrement())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  title         String
  description   String?
  reminder_date DateTime
  status        StatusReminder
  user_id       Int
  user          User           @relation(fields: [user_id], references: [id])
}

enum StatusReminder {
  open
  finished
  canceled
}

model Task {
  id                  Int           @id @default(autoincrement())
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  title               String
  description         String?
  status              StatusTask
  user_responsible_id Int
  user                User          @relation(fields: [user_responsible_id], references: [id])
  company_id          Int
  company             Company       @relation(fields: [company_id], references: [id])
  taskComment         TaskComment[]
}

enum StatusTask {
  backlog
  pending
  progress
  finished
  canceled
}

model TaskComment {
  id                Int               @id @default(autoincrement())
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  comment           String
  comment_user_name String
  comment_user_id   Int
  task_id           Int
  task              Task              @relation(fields: [task_id], references: [id])
  taskCommentLike   TaskCommentLike[]
}

model TaskCommentLike {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now())
  user_id     Int
  user        User        @relation(fields: [user_id], references: [id])
  comment_id  Int
  taskComment TaskComment @relation(fields: [comment_id], references: [id])
}
